Import('atmega_env', 'COMMON_PATH', 'CPPDEFINES')

import os

env = atmega_env

F_CPU = 16000000
  
TARGET = ARGUMENTS.get('target', 'm168')

if (TARGET == 'm328'):
   AVR_DUDE_FLAGS = '-p atmega328p -b 57600'
   CFLAGS = Split('-D__AVR_ATmega328P__  -DF_CPU={}UL -mmcu=atmega328p'.format(F_CPU))
else:
   AVR_DUDE_FLAGS = '-p atmega168 -b 19200'
   CFLAGS = Split('-D__AVR_ATmega168__  -DF_CPU={}UL -mmcu=atmega168'.format(F_CPU))

COM_PORT = int(ARGUMENTS.get("COM_PORT", "5"))
CPPDEFINES += ARGUMENTS.get("DEFINES", "").split()

CFLAGS += Split("-std=c++11 -fno-merge-constants")
CFLAGS += Split("-funsigned-char -funsigned-bitfields -fshort-enums -Os")
CFLAGS += Split("-Wall -ffunction-sections -Wl,--gc-sections -Wl,--relax")

env.Append(CCFLAGS = CFLAGS, 
           LINKFLAGS= CFLAGS,
           CXXFLAGS = CFLAGS)


#env.VariantDir(variant_dir = 'build', src_dir = 'src', duplicate = 0)

LIB_SOURCES = Glob('libs/*.cpp') + Glob('libs/*.c')
COMMON_SOURCES = Glob('common/*.c') + Glob('firmware/*.c')
ARDUINO_SOURCES = Glob('arduino/*.cpp')

SOURCE_LIST = LIB_SOURCES + COMMON_SOURCES + ARDUINO_SOURCES

env.Append(CPPPATH = [Dir('arduino'), Dir('libs')])
CPPDEFINES.append("ARDUINO_LIBS")

env.Append(CPPPATH=[Dir(COMMON_PATH), Dir('./')])
env.Append(CPPDEFINES=CPPDEFINES)

COMMON_SRC = Glob(COMMON_PATH + "/device/*c") + \
                  Glob(COMMON_PATH + "/protocol/*c") + \
                  Glob(COMMON_PATH + "/rc_decoder/*c") +  \
                  Glob(COMMON_PATH + "/*c")

AddOption('--flash',
          action='store_true',
          dest='flash',
          default=False,
          help="Flash device")

if GetOption('flash'):
   upload = env.Command("upload", fw, ["avrdude -c avrisp {} -P /dev/ttyUSB0 -U flash:w:$SOURCE".format(AVR_DUDE_FLAGS)])
   prnt = env.Command("print", upload, ["stty.exe -F /dev/ttyS{} 115200 ".format(COM_PORT-1), "start mintty cat /dev/ttyS{}".format(COM_PORT-1)])
   AlwaysBuild(upload, prnt)

Export('COMMON_SRC', 'SOURCE_LIST', 'env')

SConscript('nrf/SConscript')
SConscript('lamp/SConscript')
SConscript('chess/SConscript')
SConscript('prototypes/SConscript')
