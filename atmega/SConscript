Import('atmega_env', 'COMMON_PATH', 'CPPDEFINES')

import os

env = atmega_env

F_CPU = 16000000
  
TARGET = ARGUMENTS.get('target', 'm168')

if (TARGET == 'm328'):
   AVR_DUDE_FLAGS = '-p atmega328p -b 57600'
   CFLAGS = Split('-D__AVR_ATmega328P__  -DF_CPU={}UL -mmcu=atmega328p'.format(F_CPU))
else:
   AVR_DUDE_FLAGS = '-p atmega168 -b 19200'
   CFLAGS = Split('-D__AVR_ATmega168__  -DF_CPU={}UL -mmcu=atmega168'.format(F_CPU))

COM_PORT = int(ARGUMENTS.get("COM_PORT", "5"))
CPPDEFINES += ARGUMENTS.get("DEFINES", "").split()

CFLAGS += Split("-std=c++11 -fno-merge-constants")
CFLAGS += Split("-funsigned-char -funsigned-bitfields -fshort-enums -Os")
CFLAGS += Split("-Wall -ffunction-sections -Wl,--gc-sections -Wl,--relax")

env.Append(CCFLAGS = CFLAGS, 
           LINKFLAGS= CFLAGS)


#env.VariantDir(variant_dir = 'build', src_dir = 'src', duplicate = 0)
if ('bootloader' in COMMAND_LINE_TARGETS):
  if ('m328' in COMMAND_LINE_TARGETS):
    cmd = env.Command('flash','3rdparty/ATmegaBOOT_168_atmega328.hex','avrdude -p atmega328p -c usbasp  -U flash:w:$SOURCE')
  else:
    cmd = env.Command('flash','3rdparty/ATmegaBOOT_168_diecimila.hex','avrdude -p atmega168 -c usbasp  -U flash:w:$SOURCE')
  AlwaysBuild(cmd)
else:
  env.Append(CPPPATH=[COMMON_PATH, './'])
  env.Append(CPPDEFINES=CPPDEFINES)

  SOURCE_LIST = Glob('*.c')

  COMMON_SOURCES = Split('device/NRF24L01.c \
                   device/HD44780.c \
                   device/mfrc522.c \
                   protocol/nrf_packet.c \
                   printable.c \
                   device/MAX7219.c \
                   rc_decoder/rc_pulse.c \
                   rc_decoder/rc_state_machine.c \
                   rc_decoder/rc_base_state_machine.c \
                   rc_decoder/rc_decoder.c \
                   rc_decoder/rc_pulse_data.c \
                   device/sdcard.c ')
  COMMON_SOURCES = [os.path.join(COMMON_PATH, x) for x in COMMON_SOURCES]

  elf = env.Program('fw.elf', SOURCE_LIST + COMMON_SOURCES)
  print_size = env.Command("print_size", 'fw.elf', 'avr-size $SOURCE')
  fw = env.FW('fw.hex', 'fw.elf')
  Depends(fw, print_size)

  upload = env.Command("upload", fw, ["taskkill /F  /IM  avrdude.exe || echo done", "avrdude -c avrisp {} -P COM{} -U flash:w:$SOURCE".format(AVR_DUDE_FLAGS, COM_PORT )])
  prnt = env.Command("print", upload, ["stty.exe -F /dev/ttyS{} 115200 ".format(COM_PORT-1), "start mintty cat /dev/ttyS{}".format(COM_PORT-1)])

  AlwaysBuild(upload, prnt)